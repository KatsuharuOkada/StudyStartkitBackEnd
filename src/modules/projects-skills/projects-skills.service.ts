// Generated by ThanhLD

import { BadRequestException, Injectable } from '@nestjs/common';
import { ForbiddenError } from 'apollo-server-core';
import _ = require('lodash');
import { ProjectsSkillsRepository } from '../../repositories/projects-skills.repository';
import { ProjectsSkillsEntity } from '../../entities/projects-skills.entity';
import { UsersEntity } from '../../entities/users.entity';
import { UsersService } from '../users/users.service';
import { SkillsEntity } from '../../entities/skills.entity';
import { SkillsService } from '../skills/skills.service';
import { Transactional } from 'typeorm-transactional';

@Injectable()
export class ProjectsSkillsService {
  private entityAlias: string;
  private userAlias: string;
  private skillAlias: string;

  constructor(private projectSkillsRepository: ProjectsSkillsRepository, private skillsService: SkillsService) {
    this.entityAlias = ProjectsSkillsEntity.name;
    this.userAlias = UsersEntity.name;
    this.skillAlias = SkillsEntity.name;
  }

  async getProjectSkillsByProject(projectId: number) {
    const query = this.projectSkillsRepository
      .createQueryBuilder(this.entityAlias)
      .innerJoinAndMapOne(
        `${this.entityAlias}.skill`,
        SkillsEntity,
        this.skillAlias,
        `${this.skillAlias}.id = ${this.entityAlias}.skill_id`
      )
      .where(`${this.entityAlias}.project_id = :projectId`, { projectId });
    console.log(query.getSql());
    return await query.getMany();
  }

  @Transactional()
  async addProjectSkills(project, skills: number[]) {
    // get all skills
    const objSkills = await this.skillsService.getSkillsByIds(skills);
    const arrSkills = objSkills.map((skill) => {
      const ps = new ProjectsSkillsEntity();
      ps.project = project;
      ps.skill = skill;
      return this.projectSkillsRepository.create(ps);
    });
    return await this.projectSkillsRepository.save(arrSkills);
  }

  async deleteProjectSkills(projectId: number): Promise<boolean> {
    let data = false;

    const result = await this.projectSkillsRepository.delete({ project: { id: projectId } });
    if (result.affected && result.affected > 0) {
      data = true;
    }

    return data;
  }
}

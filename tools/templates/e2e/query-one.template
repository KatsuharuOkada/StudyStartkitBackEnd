// Generated by {{devName}}

import { Test, TestingModule } from '@nestjs/testing';
import { AppModule } from '../../../src/app.module';
import { callGraphQL, initApp, expectError, callLoginUser } from '../../common/utils';
import { HttpStatus } from '@nestjs/common';
import { DataSource } from 'typeorm';
import TestData from './../../common/data';

describe('Test api {{apiName}}', () => {
  let app: any,
    con: DataSource,
    loginUserInfo = {
      auth: {
        accessToken: '',
      },
    };

  const userData = {
    id: 1,
    userName: 'unit_test',
    // Raw pwd 123456aA@
    password: '$2a$12$4cNkcbo7sTqW74I5KY/YVe36DjoMLH74oSxat6zyrF.VfUmqZNGwy',
    email: 'unit_test@gmail.com',
    gender: 'male',
  };

  const query = `
    query {{apiName}}($id: Int!) {
      {{apiName}}(id: $id) {
        statusCode
        message
        error
        data {
          {{outputQuery}}
        }
      }
    }
  `;

  beforeAll(async () => {
    try {
      const moduleFixture: TestingModule = await Test.createTestingModule({
        imports: [AppModule],
      }).compile();
      app = await initApp(moduleFixture);
      con = app.get(DataSource);

      await TestData.saveUserInfo(con, userData);

      // Login user to get valid access token
      loginUserInfo = await callLoginUser(app);
    } catch (error) {
      console.error('Unit test {{apiName}} error', error);
      throw new Error(error);
    }
  });

  afterAll(async () => {
    try {
      await TestData.deleteUserInfo(con, { id: userData.id });
      // Close app
      await app.close();
    } catch (error) {
      console.error('Unit test {{apiName}} error', error);
      throw new Error(error);
    }
  });

  it('Test no authorization', async () => {
    const body = await callGraphQL(app, query, HttpStatus.UNAUTHORIZED, {
      id: 1,
    });
    expectError(body, ['Unauthorized']);
  });
  it('Test invalid id not number', async () => {
    const body = await callGraphQL(app, query, HttpStatus.BAD_REQUEST, {
      id: 'abc',
    });
    // Check return value
    expectError(body, ['cannot represent non-integer']);
  });
  it('Test not found', async () => {
    const body = await callGraphQL(
      app,
      query,
      HttpStatus.OK,
      {
        id: userData.id,
      },
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Check return value
    expectError(body, ['not found']);
  });
  it('Test having detail', async () => {
    // Prepare data
    const preparedData = {{preparedData}},
      data = preparedData[0];
    {{saveInfo}}
    {{otherSaveInfo}}

    const body = await callGraphQL(
      app,
      query,
      HttpStatus.OK,
      {
        id: data.id,
      },
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Clear record
    {{otherDeleteInfo}}
    await Promise.all(preparedData.map((data) => {
      if (data.id) {
        return TestData.{{deleteFunc}}(con, { id: data.id });
      }

      return null;
    }));
    // Check return value
    checkData(body, data);
  });

  // Do not delete this comment
  // Append test case in this place
});

/**
 * Check data
 * @param result
 * @param actualList
 */
function checkData(body: any, actualInfo: any) {
  const info = body.data.{{apiName}}.data;

  for (const key in info) {
    const expectedObj = info[key];
    if (typeof expectedObj === 'object') {
      if (Array.isArray(expectedObj)) {
        const actualArr = actualInfo[key];
        expectedObj.forEach((item, idx) => {
          for (const childKey in item) {
            expect(item[childKey]).toEqual(actualArr[idx][childKey]);
          }
        });
      } else {
        const actualObj = actualInfo[key];
        for (const childKey in expectedObj) {
          expect(expectedObj[childKey]).toEqual(actualObj[childKey]);
        }
      }
    } else {
      expect(expectedObj).toEqual(actualInfo[key]);
    }
  }
}

// Generated by thanhld@vitalify.asia

import { BadRequestException, Injectable } from '@nestjs/common';
import { Transactional } from 'typeorm-transactional';
import { UsersEntity } from '../../entities/users.entity';
import { UsersRepository } from '../../repositories/users.repository';
import _ from 'lodash';
// Do not delete this comment
// Append importEntity in this place
// Start latest generated importEntity
import { UsersDevicesEntity } from '../../entities/users_devices.entity';
import { UsersDevicesRepository } from '../../repositories/users_devices.repository';
import { DevicesEntity } from '../../entities/devices.entity';
import { DevicesRepository } from '../../repositories/devices.repository';

// End latest generated importEntity

@Injectable()
export class UsersDevicesService {
  // Do not delete this comment
  // Append entityAlias in this place
  // Start latest generated entityAlias
  private usersDevicesAlias: string;
  private usersAlias: string;

  // End latest generated entityAlias

  constructor(
    // Do not delete this comment
    // Append initRepository in this place
    // Start latest generated initRepository
    private usersDevicesRepository: UsersDevicesRepository,

    // End latest generated initRepository

    private usersRepository: UsersRepository,
    private deviceRepository: DevicesRepository
  ) {
    // Do not delete this comment
    // Append initEntityAlias in this place
    // Start latest generated initEntityAlias
    this.usersDevicesAlias = UsersDevicesEntity.name;
    this.usersAlias = UsersEntity.name;

    // End latest generated initEntityAlias
  }

  // Do not delete this comment
  // Append code in this place
  // Start latest generated mainCode

  /**
   * @author: thanhld@vitalify.asia
   * @date: 2023-10-19 15:51:10
   * Method addDevice
   * Add new record
   * @param owner: UsersEntity
   * @param params: request params {"rentDate":"Date","returnDate":"Date","userId":"Int","deviceId":"Int"}
   * @returns new inserted record
   */
  @Transactional()
  async addDevice(params: any, owner: UsersEntity) {
    try {
      const { rentDate, deviceName, manufacturer, os, osVersion, returnDate, status, uuid } = params;
      // insert device first
      const newDevice = new DevicesEntity();
      newDevice.deviceName = deviceName;
      newDevice.os = os;
      newDevice.manufacturer = manufacturer;
      newDevice.osVersion = osVersion;
      newDevice.status = status;
      newDevice.uuid = uuid;
      const deviceEntity = this.deviceRepository.create(newDevice);
      const device = await this.deviceRepository.save(deviceEntity);

      // insert users_devices
      const usersDevicesObjEntity = new UsersDevicesEntity();
      const renter = await this.usersRepository.findOne({ where: { id: params['userId'] } });
      if (!renter) {
        throw new BadRequestException('departements not found.');
      }
      usersDevicesObjEntity.rentDate = rentDate;
      usersDevicesObjEntity.returnDate = returnDate;
      usersDevicesObjEntity.renter = renter;
      usersDevicesObjEntity.devices = device;

      const userDevice = this.usersDevicesRepository.create(usersDevicesObjEntity);
      const response = await this.usersDevicesRepository.save(userDevice);

      return response;
    } catch (error) {
      throw new BadRequestException(error);
    }
  }
  // End latest generated mainCode
}

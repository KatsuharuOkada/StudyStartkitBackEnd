// Generated by ThanhLD

import { BadRequestException, Injectable } from '@nestjs/common';
import { ForbiddenError } from 'apollo-server-core';
import _ = require('lodash');
import { SkillsRepository } from '../../repositories/skills.repository';
import { SkillsEntity } from '../../entities/skills.entity';
import { UsersEntity } from '../../entities/users.entity';
import { UsersService } from '../users/users.service';

@Injectable()
export class SkillsService {
  private entityAlias: string;
  private userAlias: string;

  constructor(private skillsRepository: SkillsRepository, private usersService: UsersService) {
    this.entityAlias = SkillsEntity.name;
    this.userAlias = UsersEntity.name;
  }

  // Do not delete this comment
  // Append code in this place
  /**
   * @author: ThanhLD
   * @date: 2022-12-02 13:05:14
   * Method getSkills
   * Get list
   * @param pager: {limit: number, offset?: number, page?: number, isTakeAll?: boolean}
   * @param filterConditions: JSON Object
   * @param orderConditions: JSON Object
   * @returns {data, paging}
   */
  async getSkills(pager, filterConditions: object = undefined, orderConditions: object = undefined) {
    const queryBuilder = this.skillsRepository
      .createQueryBuilder(this.entityAlias)

      .select([`${this.entityAlias}.id`, `${this.entityAlias}.skillName`, `${this.entityAlias}.language`]);
    if (!_.isEmpty(filterConditions)) {
      // add filters condition here
    }
    if (!_.isEmpty(orderConditions)) {
      // add orders condition here
    }
    // pass final queryBuilder here to paging
    const [data, paging] = await queryBuilder.paginate(pager, filterConditions, orderConditions);
    // parse result as paging result
    return { data, paging };
  }

  /**
   * @author: ThanhLD
   * @date: 2022-12-02 11:49:06
   * Method addSkill
   * Add new record
   * @param owner: UsersEntity
   * @param params: {url: string, comment:string}
   * @returns new inserted record
   */
  async addSkill(owner: UsersEntity, params) {
    try {
      const skillsObjEntity = new SkillsEntity(params);

      const skill = this.skillsRepository.create(skillsObjEntity);
      return await this.skillsRepository.save(skill);
    } catch (error) {
      throw new BadRequestException(error);
    }
  }

  async getSkillsByIds(ids: number[]): Promise<SkillsEntity[]> {
    return await this.skillsRepository.createQueryBuilder().whereInIds(ids).getMany();
  }
}

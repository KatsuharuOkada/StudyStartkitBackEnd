// Generated by trungbb@vitalify.asia

import { BadRequestException, Injectable } from '@nestjs/common';
import { Transactional } from 'typeorm-transactional';
import { UsersEntity } from '../../entities/users.entity';
import { UsersRepository } from '../../repositories/users.repository';
import _ from 'lodash';
// Do not delete this comment
// Append importEntity in this place
// Start latest generated importEntity
import { ProjectsEntity } from '../../entities/projects.entity';
import { ProjectsRepository } from '../../repositories/projects.repository';
import { ProjectsSkillsEntity } from '../../entities/projects_skills.entity';
import { ProjectsSkillsRepository } from '../../repositories/projects_skills.repository';
import { SkillsEntity } from '../../entities/skills.entity';
import { SkillsRepository } from '../../repositories/skills.repository';

// End latest generated importEntity

@Injectable()
export class ProjectsService {
  // Do not delete this comment
  // Append entityAlias in this place
  // Start latest generated entityAlias
  private projectsAlias: string;
  private projectsSkillsAlias: string;
  private skillsAlias: string;

  // End latest generated entityAlias

  constructor(
    // Do not delete this comment
    // Append initRepository in this place
    // Start latest generated initRepository
    private projectsRepository: ProjectsRepository,
    private projectsSkillsRepository: ProjectsSkillsRepository,
    private skillsRepository: SkillsRepository,

    // End latest generated initRepository

    private usersRepository: UsersRepository
  ) {
    // Do not delete this comment
    // Append initEntityAlias in this place
    // Start latest generated initEntityAlias
    this.projectsAlias = ProjectsEntity.name;
    this.projectsSkillsAlias = ProjectsSkillsEntity.name;
    this.skillsAlias = SkillsEntity.name;

    // End latest generated initEntityAlias
  }

  // Do not delete this comment
  // Append code in this place
  // Start latest generated mainCode
  /**
   * @author: trungbb@vitalify.asia
   * @date: 2023-07-04 10:18:32
   * Method getProjects
   * Get list
   * @param pager: {limit: number, offset?: number, page?: number, isTakeAll?: boolean}
   * @param filterConditions: JSON Object
   * @param orderConditions: JSON Object
   * @returns {data, paging}
   */
  async getProjects(pager, filterConditions: object = undefined, orderConditions: object = undefined) {
    const queryBuilder = this.projectsRepository
      .createQueryBuilder(this.projectsAlias)
      .innerJoinAndSelect(`${this.projectsAlias}.projectsSkills`, this.projectsSkillsAlias)
      .innerJoinAndMapMany(
        `${this.projectsAlias}.skills`,
        SkillsEntity,
        this.skillsAlias,
        `${this.projectsSkillsAlias}.skill_id = ${this.skillsAlias}.id`
      )

      .select([
        `${this.projectsAlias}.projectName`,
        `${this.projectsAlias}.projectDescription`,
        `${this.projectsAlias}.startDate`,
        `${this.projectsAlias}.endDate`,
        `${this.projectsAlias}.projectCode`,
        `${this.projectsAlias}.id`,
        `${this.skillsAlias}.skillName`,
        `${this.skillsAlias}.language`,
      ]);
    if (!_.isEmpty(filterConditions)) {
      // add filters condition here
    }
    if (!_.isEmpty(orderConditions)) {
      // add orders condition here
    }
    // pass final queryBuilder here to paging
    const [data, paging] = await queryBuilder.paginate(pager, filterConditions, orderConditions);
    // parse result as paging result
    return { data, paging };
  }
  // End latest generated mainCode
}

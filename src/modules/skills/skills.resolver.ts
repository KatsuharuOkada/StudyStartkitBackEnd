// Generated by ThanhLD

import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';
import { BaseResolver } from '../../vendors/base/base.resolver';
import { UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from '../../vendors/guards/auth.guard';
import { GqlUser } from '../../vendors/decorators/user.decorator';
import { UsersEntity } from '../../entities/users.entity';
import { SkillsService } from './skills.service';

@Resolver()
@UseGuards(JwtAuthGuard)
export class SkillsResolver extends BaseResolver {
  constructor(private skillsService: SkillsService) {
    super();
  }

  // Do not delete this comment
  // Append code in this place
  /**
   * @author: ThanhLD
   * @date: 2022-12-02 13:05:14
   * API getSkills
   * Get list
   * @param user: user authenticated
   * @param pager: {limit: number, offset?: number, page?: number, isTakeAll?: boolean}
   * @returns  {data, paging}
   */
  @Query('getSkills')
  async getSkills(@GqlUser() user: UsersEntity, @Args('Pager') pager) {
    const data = await this.skillsService.getSkills(pager);
    return this.response(data);
  }

  /**
   * @author: ThanhLD
   * @date: 2022-12-02 11:49:06
   * API addSkill
   * Add new record
   * @param user: user authenticated
   * @param params: {url: string, comment:string}
   * @returns new inserted record
   */
  @Mutation('addSkill')
  async addSkill(@GqlUser() user: UsersEntity, @Args('params') params) {
    const data = await this.skillsService.addSkill(user, params);
    return this.response(data);
  }
}

version: 2
jobs:
  deploy:
    docker:
      - image: circleci/node:11.4.0
    working_directory: ~/Node_Template_Project
    steps:
      - checkout
      - setup_remote_docker
      - run: npm install
      - run:
          name: Install awscli
          command: |
            sudo apt-get -y update
            sudo apt-get -y install awscli
            aws --version
      - run:
          name: Environment Settings
          command: |
            touch .env
            if [ $CIRCLE_BRANCH = 'develop' ]; then
              cp env/.env_develop .env
              printf "\nAWS_S3_BUCKET_NAME=$DEV_AWS_S3_BUCKET_NAME" >> .env;
            elif [ $CIRCLE_BRANCH = 'staging' ]; then
              cp env/.env_staging .env
              printf "\nAWS_S3_BUCKET_NAME=$STG_AWS_S3_BUCKET_NAME" >> .env;
            elif [ $CIRCLE_BRANCH = 'production' ]; then
              cp env/.env_production .env
              printf "\nAWS_S3_BUCKET_NAME=$PRD_AWS_S3_BUCKET_NAME" >> .env;
            fi

            printf "\nAWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env;
            printf "\nAWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env;
            printf "\nAWS_REGION=$AWS_ECS_REGION" >> .env;
            printf "\n" >> .env;
            cat .env;
      - run:
          name: Create AWS credentials manually
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_ECS_REGION
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
            docker --version
      - run:
          name: Deploy to ECS
          command: |
            chmod 777 ./deploy/ecs-deploy
            $(aws ecr get-login --region $AWS_ECS_REGION)
            if [ $CIRCLE_BRANCH = 'develop' ]; then                
                docker build -t node-templete-dev .
                docker tag node-templete-dev:latest $DEV_AWS_ECR_URI:latest
                docker push $DEV_AWS_ECR_URI:latest
                sh ./deploy/dev-deploy.sh
            elif [ $CIRCLE_BRANCH = 'staging' ]; then
                docker build -t node-templete-stg .
                docker tag node-templete-stg:latest $STG_AWS_ECR_URI:latest
                docker push $STG_AWS_ECR_URI:latest
                sh ./deploy/stg-deploy.sh
            elif [ $CIRCLE_BRANCH = 'production' ]; then
                docker build -t node-templete-prd .
                docker tag node-templete-prd:latest $PRD_AWS_ECR_URI:latest
                docker push $prd_AWS_ECR_URI:latest
                sh ./deploy/prd-deploy.sh
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - develop
                - staging
                - production

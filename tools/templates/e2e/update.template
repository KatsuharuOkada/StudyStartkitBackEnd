// Generated by {{devName}}

import { Test, TestingModule } from '@nestjs/testing';
import { AppModule } from '../../../src/app.module';
import { callGraphQL, initApp, expectError, callLoginUser } from '../../common/utils';
import { HttpStatus } from '@nestjs/common';
import { DataSource } from 'typeorm';
import TestData from './../../common/data';
import { initializeTransactionalContext } from 'typeorm-transactional';

describe('Test api {{apiName}}', () => {
  let app: any,
    con: DataSource,
    loginUserInfo = {
      auth: {
        accessToken: '',
      },
    };

  const userData = {
    id: 1,
    userName: 'unit_test',
    // Raw pwd 123456aA@
    password: '$2a$12$4cNkcbo7sTqW74I5KY/YVe36DjoMLH74oSxat6zyrF.VfUmqZNGwy',
    email: 'unit_test@gmail.com',
    gender: 'male',
  };

  const mutation = `
    mutation {{apiName}}($id: Int!, $params: {{requestParam}}!) {
      {{apiName}}(id: $id, params: $params) {
        data {
          {{outputUpdate}}
        }
      }
    }
  `;

  beforeAll(async () => {
    try {
      {{transaction}}

      const moduleFixture: TestingModule = await Test.createTestingModule({
        imports: [AppModule],
      }).compile();
      app = await initApp(moduleFixture);
      con = app.get(DataSource);

      await TestData.saveUserInfo(con, userData);

      // Login user to get valid access token
      loginUserInfo = await callLoginUser(app);
    } catch (error) {
      console.error('Unit test {{apiName}} error', error);
      throw new Error(error);
    }
  });

  afterAll(async () => {
    try {
      await TestData.deleteUserInfo(con, { id: userData.id });
      // Close app
      await app.close();
    } catch (error) {
      console.error('Unit test {{apiName}} error', error);
      throw new Error(error);
    }
  });

  it('Test no authorization', async () => {
    const body = await callGraphQL(
      app,
      mutation,
      HttpStatus.UNAUTHORIZED,
      {{params}},
    );
    expectError(body, ['Unauthorized']);
  });

  it('Test params empty', async () => {
    const body = await callGraphQL(app, mutation, HttpStatus.BAD_REQUEST);
    // Check return value
    expectError(body, ['was not provided', 'was not provided']);
  });

  // Do not delete this comment
  // Append test case in this place

  it('Test not found', async () => {
    const body = await callGraphQL(
      app,
      mutation,
      HttpStatus.BAD_REQUEST,
      {{params}},
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Check return value
    expectError(body, ['not found']);
  });

  it('Test update data success', async () => {
    // Prepare data
    const preparedData = {{preparedData}};
    {{saveInfo}}
    {{otherSaveInfo}}

    const body = await callGraphQL(
      app,
      mutation,
      HttpStatus.OK,
      {{params}},
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Clear record
    {{otherDeleteInfo}}
    await Promise.all(preparedData.map((data) => {
      if (data.id) {
        return TestData.{{deleteFunc}}(con, { id: data.id });
      }

      return null;
    }));
    // Check return value
    expect(body.data.{{apiName}}.data).toMatchObject({{expectedResult}});
  });
});

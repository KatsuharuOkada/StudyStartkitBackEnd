// Generated by {{devName}}

import { Test, TestingModule } from '@nestjs/testing';
import { AppModule } from '../../../src/app.module';
import { callGraphQL, initApp, expectError, callLoginUser } from '../../common/utils';
import { HttpStatus } from '@nestjs/common';
import { DataSource } from 'typeorm';
import TestData from './../../common/data';

describe('Test api {{apiName}}', () => {
  let app: any,
    con: DataSource,
    loginUserInfo = {
      auth: {
        accessToken: '',
      },
    };

  const userData = {
    id: 1,
    userName: 'unit_test',
    // Raw pwd 123456aA@
    password: '$2a$12$4cNkcbo7sTqW74I5KY/YVe36DjoMLH74oSxat6zyrF.VfUmqZNGwy',
    email: 'unit_test@gmail.com',
    gender: 'male',
  };

  let preparedData: any = [];

  const queryList = `
    query {{apiName}}($Pager: Pager!) {
      {{apiName}}(Pager: $Pager) {
        statusCode
          message
          error
          data {
            data {
              {{outputQuery}}
            }
          }
      }
    }
  `;

  beforeAll(async () => {
    try {
      const moduleFixture: TestingModule = await Test.createTestingModule({
        imports: [AppModule],
      }).compile();
      app = await initApp(moduleFixture);
      con = app.get(DataSource);

      await TestData.saveUserInfo(con, userData);

      // Login user to get valid access token
      loginUserInfo = await callLoginUser(app);
    } catch (error) {
      console.error('Unit test {{apiName}} error', error);
      throw new Error(error);
    }
  });

  afterAll(async () => {
    try {
      await TestData.deleteUserInfo(con, { id: userData.id });
      // Close app
      await app.close();
    } catch (error) {
      console.error('Unit test {{apiName}} error', error);
      throw new Error(error);
    }
  });

  it('Test no authorization', async () => {
    const body = await callGraphQL(app, queryList, HttpStatus.UNAUTHORIZED, {
      Pager: {
        limit: 1,
        page: 0,
      },
    });
    expectError(body, ['Unauthorized']);
  });
  it('Test invalid limit not number', async () => {
    const body = await callGraphQL(app, queryList, HttpStatus.BAD_REQUEST, {
      Pager: {
        limit: 'abc',
        page: 1,
      },
    });
    // Check return value
    expectError(body, ['cannot represent non-integer']);
  });
  it('Test invalid page not number', async () => {
    const body = await callGraphQL(app, queryList, HttpStatus.BAD_REQUEST, {
      Pager: {
        limit: 1,
        page: 'abc',
      },
    });
    // Check return value
    expectError(body, ['cannot represent non-integer']);
  });
  it('Test data empty', async () => {
    const body = await callGraphQL(
      app,
      queryList,
      HttpStatus.OK,
      {
        Pager: {
          limit: 1,
          page: 1,
        },
      },
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Check return value
    checkList(body, []);
  });
  it('Test data page 1 with having record', async () => {
    // Prepare data
    preparedData = {{preparedData}};
    {{saveInfo}}
    {{otherSaveInfo}}

    const body = await callGraphQL(
      app,
      queryList,
      HttpStatus.OK,
      {
        Pager: {
          limit: 1,
          page: 1,
        },
      },
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Check return value
    let expectedResult = preparedData[0];
    checkList(body, [expectedResult]);
  });
  it('Test data page 2 with having record', async () => {
    const body = await callGraphQL(
      app,
      queryList,
      HttpStatus.OK,
      {
        Pager: {
          limit: 1,
          page: 2,
        },
      },
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Check return value
    let expectedResult = preparedData[1];
    checkList(body, [expectedResult]);
  });
  it('Test data page 3 with empty record', async () => {
    const body = await callGraphQL(
      app,
      queryList,
      HttpStatus.OK,
      {
        Pager: {
          limit: 1,
          page: 3,
        },
      },
      {
        authorization: 'Bearer ' + loginUserInfo.auth.accessToken,
      }
    );
    // Clear record
    {{otherDeleteInfo}}
    await Promise.all(preparedData.map((data) => {
      if (data.id) {
        return TestData.{{deleteFunc}}(con, { id: data.id });
      }

      return null;
    }));
    // Check return value
    checkList(body, []);
  });

  // Do not delete this comment
  // Append test case in this place
});

/**
 * Check list data
 * @param result
 * @param actualList
 */
function checkList(body: any, actualList: any) {
  // Check list
  const res = body.data.{{apiName}}.data,
    dataList = res.data;
  // Check length
  expect(dataList.length).toEqual(actualList.length);
  // Check data
  dataList.forEach((info: any, idx: number) => {
    const actualInfo = actualList[idx];
    for (const key in info) {
      const expectedObj = info[key];
      if (typeof expectedObj === 'object') {
        if (Array.isArray(expectedObj)) {
          const actualArr = actualInfo[key];
          expectedObj.forEach((item, idx) => {
            for (const childKey in item) {
              expect(item[childKey]).toEqual(actualArr[idx][childKey]);
            }
          });
        } else {
          const actualObj = actualInfo[key];
          for (const childKey in expectedObj) {
            expect(expectedObj[childKey]).toEqual(actualObj[childKey]);
          }
        }
      } else {
        expect(expectedObj).toEqual(actualInfo[key]);
      }
    }
  });
}
